name: Release Issue Processor

on:
  release:
    types: [published]

jobs:
  process-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Process release body
        uses: actions/github-script@v7
        with:
          script: |
            const releaseBody = context.payload.release.body || '';
            const issueRegex = /#(\d+)/g;
            const matches = [...releaseBody.matchAll(issueRegex)];

            if (matches.length === 0) {
              console.log('No issues referenced in release body');
              return;
            }

            const releaseTag = context.payload.release.tag_name;
            const releaseUrl = context.payload.release.html_url;
            const isPrerelease = context.payload.release.prerelease;

            for (const match of matches) {
              const issueNumber = parseInt(match[1]);
              
              try {
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                const labels = issue.data.labels.map(label => label.name);
                let newLabel = null;
                let commentBody = '';
                const releaseType = isPrerelease ? "pre-release" : "release";
                
                if (labels.includes('feature request')) {
                  newLabel = 'added';
                  commentBody = `This has been added in [${releaseTag}](${releaseUrl})`;
                  if (isPrerelease) {
                    commentBody += ". This is a pre-release version and is subject to changes";
                  }
                  commentBody += ". Thank you for your suggestion!";
                } else if (labels.includes('bug')) {
                  newLabel = 'fixed';
                  commentBody = `This has been fixed in [${releaseTag}](${releaseUrl})`;
                  if (isPrerelease) {
                    commentBody += ". This is a pre-release version and is subject to changes";
                  }
                  commentBody += ". Thank you for reporting!";
                } else {
                  commentBody = `This issue was referenced in [${releaseTag}](${releaseUrl}) so it has been closed`;
                  if (isPrerelease) {
                    commentBody += ". This is a pre-release version and is subject to changes.";
                  }
                }
                
                if (newLabel) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    labels: [newLabel]
                  });
                }
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: commentBody
                });
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  state: 'closed'
                });
                
                console.log(`Processed issue #${issueNumber} - Added label: ${newLabel || 'none'} - Release type: ${releaseType}`);
              } catch (error) {
                console.error(`Error processing issue #${issueNumber}: ${error}`);
              }
            }